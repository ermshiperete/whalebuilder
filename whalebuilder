#!/usr/bin/ruby

# whalebuilder - Debian package builder using Docker
# Copyright (C) 2015 Hubert Chathi <hubert@uhoreg.ca>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'tmpdir'
require 'optparse'
require 'gpgme'
require 'debian'
require 'erb'
require 'fileutils'

SHARE_DIR = "/usr/share/whalebuilder"
DEFAULT_CONF_FILE = "/etc/whalebuilder.conf"

# common class for templated files
class Templater
  def write (filename)
    b = binding
    result = ERB.new(File.read(File.join(SHARE_DIR, self.class::TEMPLATE_FILE))).result b
    File.open(filename, "w") do |file|
      file.write result
    end
  end
end

def make_docker_command (*args)
  ["/usr/bin/sudo", "docker"] + args
end

# helper function for calling docker
def docker (*args)
  system(*(make_docker_command(*args)))
end

#global options
options = {}
options[:config] = DEFAULT_CONF_FILE
global_opt_parser = OptionParser.new do |opts|
  opts.banner = "Debian package builder using Docker
Usage: #{opts.program_name} [globalopts] <command> [options]"
  opts.separator ""
  opts.separator "Global options:"
  opts.on "-c", "--config FILE", "configuration file (default: #{DEFAULT_CONF_FILE}) (not used)" do |v|
    options[:config] = v
  end
  opts.separator ""
  opts.separator "Commands:"
  opts.separator "    create - create a Docker image"
  opts.separator "    update - update a Docker image (not implemented)"
  opts.separator "    build - build a package"
  opts.separator ""
  opts.separator "See '#{opts.program_name} <command> --help' for help about a specific command"
end
global_opt_parser.order!

if ARGV.length == 0
  global_opt_parser.abort "Error: no command specified"
end

command = ARGV.shift

case command
when 'create'
  ##############################################################################
  # Create an image
  ##############################################################################
  options[:distribution] = "debian"
  options[:release] = "stable"
  options[:repository] = nil
  options[:maintainer] = "Nobody <nobody@example.com>"
  options[:debootstrap] = false

  create_opt_parser = OptionParser.new do |opts|
    opts.banner = "Create a Docker image for building packages
Usage: #{opts.program_name} [globalopts] create [options] <image name>"
    opts.separator ""
    opts.separator "Create options:"
    opts.on "-d", "--distribution NAME", "distribution name.  This should match a Docker image name (default: debian)" do |v|
      options[:distribution] = v
    end
    opts.on "-r", "--release NAME", "release name.  This should match a tag for the base Docker image (default: stable)" do |v|
      options[:release] = v
    end
    opts.on "--repository URL", "apt repository to use (default: http://httpredir.debian.org/debian)" do |v|
      options[:repository] = v
    end
    opts.on "--maintainer NAME", "maintainer (default: Nobody <nobody@example.com>)" do |v|
      options[:maintainer] = v
    end
    opts.on "--[no-]debootstrap", "use debootstrap to build image, rather than Docker's base Debian image (not implemented)" do |v|
      options[:debootstrap] = v
    end
  end

  create_opt_parser.parse! ARGV

  if ARGV.length == 0
    global_opt_parser.abort "Error: image name not specified"
  end

  if ARGV.length > 1
    global_opt_parser.abort "Error: extra arguments found"
  end

  Dir.mktmpdir do |dir|
    class Dockerfile < Templater
      TEMPLATE_FILE = "Dockerfile.base.erb"
      def initialize (options)
        @distribution = options[:distribution]
        @tag = options[:release]
        @maintainer = options[:maintainer]
        @repository = options[:repository]
      end
    end
    Dockerfile.new(options).write(File.join(dir, "Dockerfile"))
    docker "build", "--tag=#{ARGV[0]}", "--pull=true", dir
  end

when 'build'
  ##############################################################################
  # Build a package
  ##############################################################################
  options[:results] = "~/.local/share/whalebuilder"
  options[:install_depends] = true
  options[:remove] = false

  build_opt_parser = OptionParser.new do |opts|
    opts.banner = "Build a package
Usage: #{opts.program_name} [globalopts] build [options] <image name> <dsc file>"
    opts.separator ""
    opts.separator "Build options:"
    opts.on "--results DIR", "directory to store the results (default: ~/.local/share/whalebuilder)" do |v|
      options[:results] = v
    end
    opts.on "--[no-]install-depends", "install dependencies (default: true)" do |v|
      options[:install_depends] = v
    end
    opts.on "--[no-]rm", "remove dependency image (default: false)" do |v|
      options[:remove] = v
    end
  end

  build_opt_parser.parse! ARGV

  if ARGV.length == 0
    global_opt_parser.abort "Error: image name and dsc not specified"
  end

  if ARGV.length == 1
    global_opt_parser.abort "Error: dsc not specified"
  end

  if ARGV.length > 2
    global_opt_parser.abort "Error: extra arguments found"
  end

  name = ARGV.shift
  dsc = ARGV.shift
  dscdir = File.dirname dsc

  options[:results] = File.expand_path options[:results]
  FileUtils.mkdir_p options[:results]

  Dir.mktmpdir do |dir|
    # parse dsc file
    dsccontents = File.read(dsc)
    if (dsccontents.start_with? "-----BEGIN PGP SIGNED MESSAGE-----\n")
      crypto = GPGME::Crypto.new
      signature = GPGME::Data.new dsccontents
      sigout = GPGME::Data.new
      crypto.verify(signature, :output => sigout) do |sig|
        abort sig.to_s if !sig.valid?
      end

      dsccontents = sigout.to_s
    end

    dscfile = Debian::Dsc.new(dsccontents)

    # create image with build dependencies installed
    if options[:install_depends]
      puts "[whalebuilder] Building Docker image with build dependencies"
      # use equivs to build a package that depends on the build dependencies
      class EquivControl < Templater
        TEMPLATE_FILE = "whalebuilder-dependency-helper.ctl.erb"
        def initialize (dsc)
          @dsc = dsc
        end
      end
      EquivControl.new(dscfile).write(File.join(dir, "whalebuilder-dependency-helper.ctl"))
      Dir.chdir(dir) do
        system "/usr/bin/equivs-build", "whalebuilder-dependency-helper.ctl", [:out, :err] => ["/dev/null", "w"]
        File.unlink "whalebuilder-dependency-helper.ctl"
      end

      # create the image
      escaped_version = dscfile.version.gsub(/[^A-Za-z0-9.-]/) {|s| "_" + s.ord.to_s(16) }
      newname = "whalebuilder_build/#{dscfile.package}:#{escaped_version}"

      class Dockerfile < Templater
        TEMPLATE_FILE = "Dockerfile.build.erb"
        def initialize (basename)
          @basename = basename
        end
      end
      Dockerfile.new(name).write(File.join(dir, "Dockerfile"))
      docker "build", "--tag=#{newname}", dir

      name = newname
    end

    # copy source files
    FileUtils.mkdir File.join(dir, "source")
    files = dscfile["Files"].split("\n")
    files.map! do |x| x.length != 0 && File.join(dscdir, x.split()[2]) end
    files[0] = dsc
    FileUtils.cp files, File.join(dir, "source")

    # create script to build the package
    class BuildScript < Templater
      TEMPLATE_FILE = "build.sh.erb"
      def initialize (dscfilename, dscfile)
        @dscfilename = File.basename dscfilename
        @builddir = "#{dscfile.package}_#{dscfile.version}"
      end
    end
    BuildScript.new(dsc, dscfile).write(File.join(dir, "source", "build.sh"))
    File.chmod 0755, File.join(dir, "source", "build.sh")

    puts "[whalebuilder] building package"
    containername = "whalebuilder_build_#{dscfile.package}_#{dscfile.version}"
    # build the package
    docker "run", "--user=whalebuilder", "--name=#{containername}", "-v", "#{dir}/source:/home/whalebuilder/source:ro", "--net=none", name, "/bin/sh", "./source/build.sh"
    docker "cp", "#{containername}:/home/whalebuilder/#{dscfile.package}_#{dscfile.version}", options[:results]
    IO.popen(make_docker_command "diff", containername) do |f|
      out = f.read.split(/\n/)
      out.select! do |x|
        !(x == "C /home" \
          || x == "C /home/whalebuilder" \
          || x == "A /home/whalebuilder/source" \
          || x == "C /tmp" \
          || x.start_with?("A /home/whalebuilder/#{dscfile.package}_#{dscfile.version}"))
      end
      if out.length != 0
        warn "[whalebuilder] W: detected filesystem changes outside of build tree:"
        warn out
      end
    end
    docker "rm", containername, :out => "/dev/null"

    # remove build dependency image if requested, and only if we created it in
    # the first place
    if options[:remove] && options[:install_depends]
      docker "rmi", name, :out => "/dev/null"
    end
  end
when 'moo'
  require "base64"
  require "zlib"
  puts Zlib::Inflate.inflate(Base64.decode64("eJx9T8ENgCAM/DNFw0cNFDdwA+MCJLqBC3R424KAUWwftPR6vTPQDYfO9KcEpNP9jnZPMjWBQX4osyPUdc1URwOjlut56js1RJmMseRR+I5Qj9KDLTNG/Vye6iMJIzakiNayNLTD2yd9WJ7fsCgiPGz/qCyohMePi+wLizFBXHlbRg0="))
else
  ##############################################################################
  # everything else
  ##############################################################################
  global_opt_parser.abort "Error: unknown command #{command}"
end
